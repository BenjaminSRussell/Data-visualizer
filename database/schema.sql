-- PostgreSQL Schema for Sitemap Analyzer
-- Auto-generated by SQLAlchemy models, but can be used for initialization

-- URLs table
CREATE TABLE IF NOT EXISTS urls (
    id SERIAL PRIMARY KEY,
    url TEXT UNIQUE NOT NULL,
    domain VARCHAR(255),
    path TEXT,
    last_crawled TIMESTAMP,
    status_code INTEGER,
    content_type VARCHAR(100),
    file_extension VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Classifications table
CREATE TABLE IF NOT EXISTS classifications (
    id SERIAL PRIMARY KEY,
    url_id INTEGER REFERENCES urls(id) ON DELETE CASCADE,
    category VARCHAR(100),
    confidence FLOAT,
    model_version VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Page metadata table
CREATE TABLE IF NOT EXISTS page_metadata (
    id SERIAL PRIMARY KEY,
    url_id INTEGER UNIQUE REFERENCES urls(id) ON DELETE CASCADE,
    title TEXT,
    description TEXT,
    keywords TEXT[],
    language VARCHAR(10),
    word_count INTEGER,
    has_images BOOLEAN,
    has_videos BOOLEAN,
    has_forms BOOLEAN,
    extracted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Patterns table
CREATE TABLE IF NOT EXISTS patterns (
    id SERIAL PRIMARY KEY,
    pattern_type VARCHAR(50),
    pattern_value TEXT,
    frequency INTEGER,
    confidence FLOAT,
    discovered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Crawl sessions table
CREATE TABLE IF NOT EXISTS crawl_sessions (
    id SERIAL PRIMARY KEY,
    session_id VARCHAR(100) UNIQUE NOT NULL,
    total_urls INTEGER,
    processed_urls INTEGER DEFAULT 0,
    failed_urls INTEGER DEFAULT 0,
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP,
    status VARCHAR(50) DEFAULT 'processing'
);

-- Legacy tables for backward compatibility
CREATE TABLE IF NOT EXISTS url_analyses (
    id SERIAL PRIMARY KEY,
    url TEXT NOT NULL,
    domain VARCHAR(255) NOT NULL,
    path TEXT,
    classifications JSON,
    sitemap_url TEXT,
    priority FLOAT,
    change_freq VARCHAR(50),
    last_modified TIMESTAMP,
    analyzed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    analysis_version VARCHAR(50),
    status VARCHAR(50) DEFAULT 'pending' NOT NULL,
    error_message TEXT
);

CREATE TABLE IF NOT EXISTS sitemap_sources (
    id SERIAL PRIMARY KEY,
    sitemap_url TEXT UNIQUE NOT NULL,
    domain VARCHAR(255) NOT NULL,
    total_urls INTEGER DEFAULT 0,
    analyzed_urls INTEGER DEFAULT 0,
    failed_urls INTEGER DEFAULT 0,
    first_crawled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_crawled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    status VARCHAR(50) DEFAULT 'active' NOT NULL,
    crawl_frequency VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS categories (
    id SERIAL PRIMARY KEY,
    category_type VARCHAR(100) NOT NULL,
    label VARCHAR(200) NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    sort_order INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(100)
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_urls_domain ON urls(domain);
CREATE INDEX IF NOT EXISTS idx_urls_file_extension ON urls(file_extension);
CREATE INDEX IF NOT EXISTS idx_urls_url ON urls(url);

CREATE INDEX IF NOT EXISTS idx_classifications_url_id ON classifications(url_id);
CREATE INDEX IF NOT EXISTS idx_classifications_category ON classifications(category);
CREATE INDEX IF NOT EXISTS idx_classifications_confidence ON classifications(confidence);

CREATE INDEX IF NOT EXISTS idx_page_metadata_url_id ON page_metadata(url_id);

CREATE INDEX IF NOT EXISTS idx_patterns_type ON patterns(pattern_type);

CREATE INDEX IF NOT EXISTS idx_crawl_sessions_session_id ON crawl_sessions(session_id);
CREATE INDEX IF NOT EXISTS idx_crawl_sessions_status ON crawl_sessions(status);

CREATE INDEX IF NOT EXISTS idx_url_analyses_url ON url_analyses(url);
CREATE INDEX IF NOT EXISTS idx_url_analyses_domain ON url_analyses(domain);
CREATE INDEX IF NOT EXISTS idx_url_analyses_analyzed_at ON url_analyses(analyzed_at);
CREATE INDEX IF NOT EXISTS idx_url_analyses_domain_analyzed_at ON url_analyses(domain, analyzed_at);

CREATE INDEX IF NOT EXISTS idx_sitemap_sources_domain ON sitemap_sources(domain);

CREATE INDEX IF NOT EXISTS idx_categories_type ON categories(category_type);
CREATE INDEX IF NOT EXISTS idx_categories_active ON categories(is_active);
